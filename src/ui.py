from src.logic import (
    add_new_category,
    add_new_subcategory,
    load_from_data,
    log_activity,
    statistics,
)
from src.storage import load_categories
from src.visualization import visualization_subcategory_bar


class Menu:
    ADD_NEW_DOING_LOG = "1"
    ADD_NEW_CATEGORY = "2"
    ADD_NEW_SUBCATEGORY = "3"
    SHOW_STATISTIC = "4"
    PLOT_VISUALIZATION = "5"
    QUIT = "6"


def show_menu():
    print("\n===Daily Tracker by nixiee===")
    print(f"{Menu.ADD_NEW_DOING_LOG}. –ó–∞–ø–∏—Å–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    print(f"{Menu.ADD_NEW_CATEGORY}. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    print(f"{Menu.ADD_NEW_SUBCATEGORY}. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    print(f"{Menu.SHOW_STATISTIC}. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    print(f"{Menu.PLOT_VISUALIZATION}. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    print(f"{Menu.QUIT}. –í—ã—Ö–æ–¥")


def pick_category(categories: dict) -> str:
    for i, category in enumerate(categories.keys(), 1):
        print(f"{i}. {category}")

    while True:
        try:
            choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ")) - 1
            if 0 <= choice < len(categories):
                return tuple(categories.keys())[choice]
            else:
                print("------------")
                print("–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
                print("------------")
        except ValueError:
            print("------------")
            print("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ(int).")
            print("------------")


def pick_doings(categories: dict, category_name: str) -> str:
    doings = categories[category_name]
    print(f"–î–µ–ª–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}': ")
    for i, doing in enumerate(doings, 1):
        print(f"{i}. {doing}")

    while True:
        try:
            choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–ª–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ")) - 1
            if 0 <= choice < len(doings):
                return doings[choice]
            else:
                print("------------")
                print("–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
                print("------------")
        except ValueError:
            print("------------")
            print("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ(int).")
            print("------------")


def how_much_value() -> int:
    while True:
        try:
            value = int(
                input("–í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é –Ω–∞ –¥–µ–ª–æ(–º–∏–Ω—É—Ç—ã, –∫–æ–ª-–≤–æ –∏ —Ç.–¥.): ")
            )
            if value <= 0:
                print("------------")
                print("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ(int) –±–æ–ª—å—à–µ 0.")
                print("------------")
                continue
            else:
                return value
        except ValueError:
            print("------------")
            print("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ(int).")
            print("------------")


def show_statistics(doing: str, stats: dict):
    if "err" in stats:
        print()
        print(f"–î–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ª—É {doing} -- –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
    print()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ '{doing}':")
    print(f"- –í—Å–µ–≥–æ –¥–Ω–µ–π: {stats['total_days']}")
    print(f"- –í—Å–µ–≥–æ: {stats['total_value']}")
    print(f"- –°—Ä–µ–¥–Ω–µ–µ: {stats['average']}")
    print(f"- –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {stats['last_date']} ‚Äî {stats['last_value']}")
    if stats["today_value"] is not None:
        print(f"- –°–µ–≥–æ–¥–Ω—è: ‚úÖ {stats['today_value']}")
    else:
        print("- –°–µ–≥–æ–¥–Ω—è: ‚ùå –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ")


def add_log_flow():
    categories = load_categories()
    category = pick_category(categories)
    doing = pick_doings(categories, category)
    value = how_much_value()
    print()
    log_activity(doing, value)


def add_category_flow():
    add_new_category(input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "))


def add_subcategory_flow():
    categories = load_categories()
    category = pick_category(categories)
    add_new_subcategory(category, input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "))


def show_statistics_flow():
    categories = load_categories()
    category = pick_category(categories)
    doing = pick_doings(categories, category)
    data = load_from_data()
    stats = statistics(doing, data)
    print()
    show_statistics(doing, stats)


def show_plot_flow():
    categories = load_categories()
    category = pick_category(categories)
    doing = pick_doings(categories, category)
    data = load_from_data()
    visualization_subcategory_bar(data, doing)
